<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2023/01/12/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B/"/>
      <url>/2023/01/12/%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%92%8C%E5%8E%9F%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数的应用"><a href="#构造函数的应用" class="headerlink" title="构造函数的应用"></a>构造函数的应用</h2><p>在我们类这个概念还没有出来之前，我们都是通过构造函数的方法来创建实例化对象。<br>我们先来看看传统创建对象和构造函数创建的区别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.通过对象字面量来创建。</span></span><br><span class="line"><span class="keyword">var</span> student = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">  <span class="attr">sayHi</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi,my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过 new Object() 创建对象。</span></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    student.<span class="property">name</span> = <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    student.<span class="property">age</span> = <span class="number">18</span>,</span><br><span class="line">    student.<span class="property">gender</span> = <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    student.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi,my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>  上面两种都是简单的创建对象的方式，那如果是一个班的学生，n 个学生呢？<br>  显然如果这样做的话代码冗余率太高，是不可取的。我们也学过函数，<br>  所以简单方式的改进是：工厂函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.通过工厂函数来创建对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createStudent</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  student.<span class="property">name</span> = name;</span><br><span class="line">  student.<span class="property">age</span> = age;</span><br><span class="line">  student.<span class="property">gender</span> = gender;</span><br><span class="line">  student.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi,my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> student;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="title function_">createStudent</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="title function_">createStudent</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">19</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样封装代码确实解决了代码冗余的问题，但是每次调用函数 createStudent()都会创建新函数sayHi()，也就是说每个对象都有自己的 sayHi() 版本，而事实上，每个对象都共享一个函数。为了解决这个问题，我们引入面向对象编程里 的一个重要概念：构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.通过构造函数来创建对象。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi,my name is &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br></pre></td></tr></table></figure><p>来看看构造函数与工厂函数的区别：<br>1.首先在构造函数内没有创建对象，而是使用 this 关键字，将属性和方法赋给了 this 对象。<br>2.构造函数内没有 return 语句，this 属性默认下是构造函数的返回值。<br>3.函数名使用的是大写的 Student。<br>4.用 new 运算符和类名 Student 创建对象。</p><p>构造函数虽然科学，但仍然存在一些问题。<br>我们使用前面的构造函数例子来讲解（修改了 sayHi() 方法）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首先我们创建两个实例化对象：</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line">s1.<span class="title function_">sayHi</span>(); <span class="comment">// 打印 hi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line">s2.<span class="title function_">sayHi</span>(); <span class="comment">// 打印 hi</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">sayHi</span> == s2.<span class="property">sayhi</span>); <span class="comment">// 结果为 false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于每个对象都是由 new Student 创建出来的，因此每创建一个对象，函数<br>sayHi() 都会被重新创建一次，这个时候，每个对象都拥有一个独立的，但是功<br>能完全相同的方法，这样势必会造成内存浪费。有的人可能会想，既然是一样的<br>那我们就单独把它提出来，写一个函数，每次调用不就可以了吗？比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, gender</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sayHi</span> = sayHi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line">s1.<span class="title function_">sayHi</span>(); <span class="comment">// 打印 hi</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line">s2.<span class="title function_">sayHi</span>(); <span class="comment">// 打印 hi</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">sayHi</span> == s2.<span class="property">sayHi</span>); <span class="comment">// 结果为 true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是这样做会导致全局变量增多，可能会引起命名冲突，代码结果混乱，<br>维护困难。通过使用原型可以很好的解决这个问题。</p><h2 id="原型的作用"><a href="#原型的作用" class="headerlink" title="原型的作用"></a>原型的作用</h2><p>原型：prototype<br>在 JavaScript 中，每一个构造函数都有一个 prototype 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">let</span> dgl = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;戴古拉k&quot;</span>,<span class="number">22</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl.<span class="property">__proto__</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3b270953c0ad46709640c84216e8c862.png#pic_center" alt="在这里插入图片描述"></p><p>而在我们的实例对象中具有__proto__属性,它指向的是我们构造函数中的prototype原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">movie</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;极地追击&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> dgl = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;戴古拉k&quot;</span>,<span class="number">22</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl);</span><br><span class="line"> dgl.<span class="title function_">movie</span>(); </span><br></pre></td></tr></table></figure><p>因此当我们调用的时候__proto__直接帮我们指向了prototype中的movie属性</p><p>在构造函数的prototype中存在一个constructor属性,它指向我们prototype原型对象所在的构造函数<br><img src="https://img-blog.csdnimg.cn/da3db3eed95e416f8260ffec5032d722.png#pic_center" alt="在这里插入图片描述"><br>注意我们使用prototype创建方法时都是prototype + .属性 ,如果我们使用的是对象添加方法则constructor会不一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">movie</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;极地追击&quot;</span>);</span><br><span class="line"> &#125;        </span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> dgl = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;戴古拉k&quot;</span>,<span class="number">22</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl.<span class="property">__proto__</span>.<span class="property">constructor</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/364c7cfbee0244f594ef663063870ffa.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"> <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;极地追击&quot;</span>);</span><br><span class="line"> &#125;       </span><br><span class="line">&#125;          </span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> dgl = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&quot;戴古拉k&quot;</span>,<span class="number">22</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(dgl.<span class="property">__proto__</span>.<span class="property">constructor</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/a146a4123008459f8d3d9ad3a78b37dd.png#pic_center" alt="在这里插入图片描述"><br>上图可看两种方式得到的构造函数不一样，因为我们用{}创建时会覆盖掉原来的constructor属性,因此得到的结果不同</p><h2 id="构造函数、实例、原型三者之间的关系"><a href="#构造函数、实例、原型三者之间的关系" class="headerlink" title="构造函数、实例、原型三者之间的关系"></a>构造函数、实例、原型三者之间的关系</h2><p>每个构造函数都有一个原型对象，原型对象包含一个指向构造函数的指针 constructor，而实例都包含一个指向原型对象的内部指针__proto__。<br><img src="https://img-blog.csdnimg.cn/664ab8cd2c9b480c866a42b509285849.png#pic_center" alt="在这里插入图片描述"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>在我们的构造函数的prototype原型对象中还有一个Object原型对象以及__proto__属性,__proto__属性指向Object 原型对象而Object通过constructor又指向Object构造函数,如此形成一条链式结构，即原型链<br><img src="https://img-blog.csdnimg.cn/f94ed314986b4a76b8776639e7ab6643.png#pic_center" alt="在这里插入图片描述"></p><h2 id="属性查找原则"><a href="#属性查找原则" class="headerlink" title="属性查找原则"></a>属性查找原则</h2><p><img src="https://img-blog.csdnimg.cn/45ae2606e47548128d85b7f1220ea485.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>study</title>
      <link href="/2023/01/11/study/"/>
      <url>/2023/01/11/study/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&#x27;成功了&#x27;</span>)</span><br><span class="line">   &#125; )</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我先来&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>show</title>
      <link href="/2023/01/10/show/"/>
      <url>/2023/01/10/show/</url>
      
        <content type="html"><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款##二级</p><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款###三级</p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款<br>飒飒是卡就是哪款####四级</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2023/01/10/hello%20world/"/>
      <url>/2023/01/10/hello%20world/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
